# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

union AuthenticatedItem = User

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

type Image {
  id: ID!
  image: CloudinaryImage_File
  caption: String
}

input ImageCreateInput {
  image: Upload
  caption: String
}

input ImageOrderByInput {
  id: OrderDirection
  caption: OrderDirection
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageUpdateInput {
  image: Upload
  caption: String
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  caption: StringFilter
}

input ImageWhereUniqueInput {
  id: ID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSetting(data: SettingCreateInput!): Setting
  createSettings(data: [SettingCreateInput!]!): [Setting]
  updateSetting(
    where: SettingWhereUniqueInput!
    data: SettingUpdateInput!
  ): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteSettings(where: [SettingWhereUniqueInput!]!): [Setting]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

enum OrderDirection {
  asc
  desc
}

type Page {
  id: ID!
  pageTitle: String
  url: String
  packageName: String
  version: String
  description: String
  isOrphaned: Boolean
  author: String
  requires: String
  design: Page_design_Document
  hideAccessibilityTab: Boolean
  accessibility: Page_accessibility_Document
  hideCodeTab: Boolean
  code: Page_code_Document
  relatedPages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  relatedPagesCount(where: PageWhereInput! = {}): Int
  relatedInfo: Page_relatedInfo_Document
}

type Page_accessibility_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Page_code_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Page_design_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Page_relatedInfo_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageCreateInput {
  pageTitle: String
  url: String
  packageName: String
  design: JSON
  hideAccessibilityTab: Boolean
  accessibility: JSON
  hideCodeTab: Boolean
  code: JSON
  relatedPages: PageRelateToManyForCreateInput
  relatedInfo: JSON
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  pageTitle: OrderDirection
  url: OrderDirection
  packageName: OrderDirection
  hideAccessibilityTab: OrderDirection
  hideCodeTab: OrderDirection
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageUpdateInput {
  pageTitle: String
  url: String
  packageName: String
  design: JSON
  hideAccessibilityTab: Boolean
  accessibility: JSON
  hideCodeTab: Boolean
  code: JSON
  relatedPages: PageRelateToManyForUpdateInput
  relatedInfo: JSON
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  pageTitle: StringFilter
  url: StringFilter
  packageName: StringNullableFilter
  hideAccessibilityTab: BooleanFilter
  hideCodeTab: BooleanFilter
  relatedPages: PageManyRelationFilter
}

input PageWhereUniqueInput {
  id: ID
}

type PasswordState {
  isSet: Boolean!
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  settings(
    where: SettingWhereInput! = {}
    orderBy: [SettingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Setting!]
  setting(where: SettingWhereUniqueInput!): Setting
  settingsCount(where: SettingWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

enum QueryMode {
  default
  insensitive
}

type Setting {
  id: ID!
  name: String
  value: JSON
}

input SettingCreateInput {
  name: String
  value: JSON
}

input SettingOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

input SettingUpdateInput {
  name: String
  value: JSON
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  name: StringFilter
}

input SettingWhereUniqueInput {
  id: ID
  name: String
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type User {
  id: ID!
  email: String
  password: PasswordState
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

input UserCreateInput {
  email: String
  password: String
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserUpdateInput {
  email: String
  password: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
