(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{1232:function(t,e,a){"use strict";a.r(e);var l=a(6),n=(a(25),a(302),a(309));class i extends n.a{constructor(...t){super(...t),Object(l.a)(this,"getFilterGraphQL",({path:t,type:e,value:a})=>{const l="is"===e?t:"".concat(t,"_").concat(e);let n=a.replace(/\s/g,"");return["in","not_in"].includes(e)&&(n="[".concat(n,"]")),"".concat(l,": ").concat(n)}),Object(l.a)(this,"getFilterLabel",({label:t,type:e})=>{const a=["in","not_in"].includes(e)?" (comma separated)":"";return"".concat(this.label," ").concat(t.toLowerCase()).concat(a)}),Object(l.a)(this,"formatFilter",({label:t,type:e,value:a})=>"".concat(this.getFilterLabel({label:t,type:e}),': "').concat(a.replace(/\s/g,""),'"')),Object(l.a)(this,"serialize",t=>{const e=t[this.path];return"number"==typeof e?e:"string"==typeof e&&e.length>0?parseInt(e,10):null}),Object(l.a)(this,"getFilterTypes",()=>[{type:"is",label:"Is exactly",getInitialValue:()=>""},{type:"not",label:"Is not exactly",getInitialValue:()=>""},{type:"gt",label:"Is greater than",getInitialValue:()=>""},{type:"lt",label:"Is less than",getInitialValue:()=>""},{type:"gte",label:"Is greater than or equal to",getInitialValue:()=>""},{type:"lte",label:"Is less than or equal to",getInitialValue:()=>""},{type:"in",label:"Is one of",getInitialValue:()=>""},{type:"not_in",label:"Is not one of",getInitialValue:()=>""}])}}e.default=i}}]);